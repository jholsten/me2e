{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Me2e Test Configuration",
  "description": "Test Configuration for the Me2e Library",
  "type": "object",
  "properties": {
    "docker": {
      "$ref": "#/definitions/docker"
    },
    "requests": {
      "$ref": "#/definitions/requests"
    },
    "environment": {
      "$id": "#/properties/environment",
      "type": "object",
      "description": "Definition of the test environment",
      "properties": {
        "docker-compose": {
          "type": "string",
          "description": "Path to Docker-Compose file for the Microservice System containing definitions for all self-managed services. The file needs to be located in the `resources` folder."
        },
        "mock-servers": {
          "$id": "#/properties/mock-servers",
          "type": "object",
          "description": "HTTP web servers mocking third party services",
          "patternProperties": {
            "^[a-zA-Z0-9._-]+$": {
              "$ref": "#/definitions/mock-server"
            }
          }
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "environment"
  ],
  "additionalProperties": false,
  "definitions": {
    "docker": {
      "$id": "#/definitions/docker",
      "description": "Configuration for Docker/Docker-Compose.",
      "type": "object",
      "properties": {
        "docker-compose-version": {
          "type": "string",
          "description": "Docker-Compose version to use. Default: V2",
          "enum": [
            "V1",
            "V2"
          ],
          "default": "V2"
        },
        "pull-policy": {
          "type": "string",
          "description": "Policy on pulling Docker images. Default: MISSING",
          "enum": [
            "ALWAYS",
            "MISSING"
          ],
          "default": "MISSING"
        },
        "build-images": {
          "type": "boolean",
          "description": "Whether to always build images before starting containers. Default: false",
          "default": false
        },
        "remove-images": {
          "type": "string",
          "description": "Whether to remove images used by services after containers shut down. Default: NONE",
          "enum": [
            "NONE",
            "ALL",
            "LOCAL"
          ],
          "default": "NONE"
        },
        "remove-volumes": {
          "type": "boolean",
          "description": "Whether to remove volumes after containers shut down. Default: true",
          "default": true
        },
        "health-timeout": {
          "type": "integer",
          "description": "Number of seconds to wait at most until containers are healthy. Only applicable if at least one healthcheck is defined in Docker-Compose. Default: 10",
          "default": 10
        }
      },
      "additionalProperties": false
    },
    "requests": {
      "$id": "#/definitions/requests",
      "description": "Configuration of HTTP requests to Microservice containers.",
      "type": "object",
      "properties": {
        "connect-timeout": {
          "type": "integer",
          "description": "Connect timeout in seconds. Default: 10",
          "default": "10"
        },
        "read-timeout": {
          "type": "integer",
          "description": "Read timeout in seconds. Default: 10",
          "default": "10"
        },
        "write-timeout": {
          "type": "integer",
          "description": "Write timeout in seconds. Default: 10",
          "default": "10"
        }
      },
      "additionalProperties": false
    },
    "mock-server": {
      "$id": "#/definitions/mock-server",
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "Hostname of the service to be represented by this mock server",
          "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
        },
        "stubs": {
          "type": "array",
          "description": "List of paths to stub definitions. The files need to be located in `resources` folder.",
          "items": {
            "type": "string",
            "pattern": "^([^\\r\\n\\t\\f\\v\\?\\\\*\\\\|\\<\\>\\/]+\\/?)*stub\\.(yaml|json)$"
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "hostname"
      ]
    }
  }
}

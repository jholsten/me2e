plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id "org.jetbrains.kotlin.jvm" version "1.9.10"

    // Apply the java-library plugin for API and implementation separation.
    id "java-library"

    // Apply the Maven plugin for publishing the library.
    id "maven-publish"

    // Required for annotation processing
    id "org.jetbrains.kotlin.kapt" version "1.9.10"

    // Apply Dokka Plugin to support generation of Kotlin documentation
    id "org.jetbrains.dokka" version "1.9.10"
}

group = "org.jholsten"
version = System.getenv("VERSION_NUMBER") ?: "0.0.1"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

/**
 * Configuration for publishing the library to the GitLab Package Registry via GitLab CI.
 */
publishing {
    publications {
        library(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "https://gitlab.informatik.uni-bremen.de/api/v4/projects/33508/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = "Job-Token"
                value = System.getenv("CI_JOB_TOKEN")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

ext {
    mockk_version = "1.13.4"
    junit_version = "5.9.2"
    junit_platform_version = "1.10.1"
    assertj_version = "3.24.2"
    okhttp_version = "4.9.3"
    apache_version = "5.1.3"
    jackson_version = "2.14.2"
    json_schema_validator_version = "1.0.86"
    mapstruct_version = "1.5.2.Final"
    apache_commons_version = "3.12.0"
    wiremock_version = "2.35.0"
    awaitility_version = "4.1.0"
    logback_version = "1.4.14"
    slf4j_version = "2.0.9"
    kformat_version = "0.10"
    testcontainers_version = "1.19.3"
    classgraph_version = "4.8.165"
    auto_service_version = "1.1.1"
    compile_testing_version = "0.21.0"
    mysql_connector_version = "8.2.0"
    postgres_connector_version = "42.7.1"
    maria_db_connector_version = "3.3.2"
    mongodb_connector_version = "4.11.1"
    mybatis_version = "3.5.7"
    thymeleaf_version = "3.1.2.RELEASE"
    json_path_version = "2.9.0"
    json_assert_version = "1.5.1"
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"

    // Use the JUnit 5 integration.
    implementation "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    implementation "org.junit.platform:junit-platform-launcher:$junit_platform_version"

    // Dependency for recursive comparison in tests
    testImplementation "org.assertj:assertj-core:$assertj_version"

    // Dependency for extended mocking
    testImplementation "io.mockk:mockk:$mockk_version"

    // Dependency for executing HTTP requests
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    testImplementation "org.apache.httpcomponents.core5:httpcore5:$apache_version"

    // Dependency for Kotlin support
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.10"

    // Dependencies for Jackson
    api "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"

    // Dependency for validating data using JSON schema
    implementation "com.networknt:json-schema-validator:$json_schema_validator_version"

    // Dependency for mapping DTOs
    implementation "org.mapstruct:mapstruct:$mapstruct_version"
    kapt "org.mapstruct:mapstruct-processor:$mapstruct_version"

    // Dependency for utils
    implementation "org.apache.commons:commons-lang3:$apache_commons_version"

    // Dependency for mocking web servers
    implementation "com.github.tomakehurst:wiremock-jre8:$wiremock_version"

    // Dependency for awaiting events
    implementation "org.awaitility:awaitility:$awaitility_version"

    // Dependencies for logging
    api "ch.qos.logback:logback-core:$logback_version"
    api "ch.qos.logback:logback-classic:$logback_version"
    api "org.slf4j:slf4j-api:$slf4j_version"

    // Dependency for formatting tables
    implementation "de.m3y.kformat:kformat:$kformat_version"

    // Dependency for managing docker containers
    implementation "org.testcontainers:testcontainers:$testcontainers_version"

    // Dependency for scanning annotations
    implementation "io.github.classgraph:classgraph:$classgraph_version"

    // Dependency for registering and testing annotation processors
    implementation "com.google.auto.service:auto-service:$auto_service_version"
    kapt "com.google.auto.service:auto-service:$auto_service_version"
    testImplementation "com.google.testing.compile:compile-testing:$compile_testing_version"

    // Dependencies for database connections
    implementation "com.mysql:mysql-connector-j:$mysql_connector_version"
    implementation "org.postgresql:postgresql:$postgres_connector_version"
    implementation "org.mariadb.jdbc:mariadb-java-client:$maria_db_connector_version"
    implementation "org.mongodb:mongodb-driver-sync:$mongodb_connector_version"
    implementation "org.mybatis:mybatis:$mybatis_version"

    // Dependency for generating HTML reports
    api "org.thymeleaf:thymeleaf:$thymeleaf_version"

    // Dependency for reading and comparing JSON nodes
    implementation "com.jayway.jsonpath:json-path:$json_path_version"
    implementation "org.skyscreamer:jsonassert:$json_assert_version"
}

// Configuration for HTML documentation
dokkaHtml {
    dokkaSourceSets.configureEach {
        includeNonPublic.set(false)
        samples.from("$projectDir/samples")
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
    }
    withSourcesJar()
    withJavadocJar()
}

test {
    useJUnitPlatform()
    // Show log output while running tests
    testLogging.showStandardStreams = true
    // Disable Me2eTestExecutionListener for internal tests
    systemProperty("junit.platform.execution.listeners.deactivate", "org.jholsten.me2e.Me2eTestExecutionListener")
    // Disable Me2e extension for internal tests
    environment "ME2E_EXTENSION_DISABLED", "true"
    // Disable testcontainer"s Ryuk for internal tests
    environment "TESTCONTAINERS_RYUK_DISABLED", "true"
}
